<?php/** * Created by PhpStorm. * User: Игорь * Date: 15.06.2015 * Time: 13:01 */class Category extends Module {    public $module = "Category";    public $title;    public $description;    public $keywords;    public $category;    public $categories;    public $product;    public $sale;    public $price;    public $brands;    function __construct($str){		parent::__construct();        if(empty($str) or !is_string($str)){            parent::page_404();            exit;        }        if(App::POST('sortPrice')) {            $this -> go_SortPrice(App::POST('pricemin'), App::POST('pricemax'));        }        if(App::POST('sortBrand')) {            $this -> go_SortBrand(App::POST('brand'));        }        if(App::POST('order_price')) {            $this -> categories = $this -> get_category($str, App::POST('order_price'));        }        if(App::POST('order_price_desc')) {            $this -> categories = $this -> get_category($str, App::POST('order_price_desc'));        }        if(App::POST('button')) {            $this -> go_toPay(App::POST('button'));        }        $this -> title = $str;		$this -> category = $str;		$this -> categories = $this -> get_category($str);	}    /**     * @param $cat     * @return array     */    private function get_category($cat, $sort = FALSE) {		$result = App::$db -> query("				SELECT * FROM categories WHERE title = '$cat'			");        if($result -> columnCount() != 0) {            $result -> setFetchMode(PDO::FETCH_ASSOC);            while ($category = $result->fetch()) {                $arr[] = $category;            }            foreach ($arr AS $cat) {                if ($cat['parent_id'] == 0) {                    $category_arr = $this -> add_category($cat['id']);                    $this -> sale = $this -> get_sale();                    parent::template('p_category');                } else {                    $category_arr = $this -> add_category($cat['parent_id'] <= 3 ? $cat['id'] : $cat['parent_id']);                    $this -> product = $this -> get_product($cat['id'], $sort);                    $this -> price = $this -> get_categoryPriceSort($cat['id']);                    $this -> brands = $this -> get_categoryBrandSort();                    $this-> sale = $this -> get_sale();                    $this-> category_id = $cat['id'];                    parent::template('ch_category');                }            }        }		return $category_arr;	}    /**     * @param $id     * @return array     */    private function add_category($id) {        $result = App::$db -> query("				                      SELECT *				                      FROM categories				                      WHERE parent_id = '".$id."'			                            ");        $result -> setFetchMode(PDO::FETCH_ASSOC);        while($category = $result->fetch()) {            $categories[] = $category;        }        foreach($categories AS $cat){            $res = App::$db -> query("                                        SELECT *                                        FROM categories                                        WHERE parent_id = '".$cat['id']."'                                    ");            $res -> setFetchMode(PDO::FETCH_ASSOC);            for($i = 0; $i < $res -> rowCount();$i++){                $row = $res->fetch();                $categories[$row['parent_id']][] = $row;            }        }        if(empty($categories)){            parent::page_404();            exit;        }        return $categories;	}    private function get_product ($id, $sort = FALSE){            $query = "                                SELECT product.*                                FROM product                                LEFT JOIN categories ON product.id_category = categories.id                                WHERE categories.parent_id = '" . $id . "' OR categories.id = '" . $id . "'                            ";        switch($sort){        }        if($sort == $_POST['order_price']) {                $query .= " ORDER BY price_g";        }        if($sort == $_POST['order_price_desc']) {                //$query .= " ORDER BY price_g DESC";        }            $result = App::$db -> query($query);            if($result -> columnCount() != 0) {                $result -> setFetchMode(PDO::FETCH_ASSOC);                for ($i = 0; $i < $result -> rowCount(); $i++) {                    $row = $result -> fetch();                    $categories[] = $row;                }            }        if(empty($categories)){            parent::page_404();            exit;        }        return $categories;    }    /**     * @return array     */    private function get_sale(){        $result = App::$db -> query("                                      SELECT *                                      FROM product                                      WHERE sale = 1");        if($result -> columnCount() != 0) {            $result -> setFetchMode(PDO::FETCH_ASSOC);            while ($category = $result->fetch()) {                $sale[] = $category;            }        }        return $sale;    }    private function get_categoryPriceSort($id){            $result = App::$db -> query("                                    SELECT MAX(product.`price_g`) AS pricemax, MIN(product.price_g) AS pricemin                                    FROM product                                    LEFT JOIN categories ON product.id_category = categories.id                                    WHERE categories.parent_id = '" . $id . "' OR categories.id = '" . $id . "'                                    ");            if($result -> columnCount() != 0) {                $result -> setFetchMode(PDO::FETCH_ASSOC);                while ($arr = $result -> fetch()) {                    $sort[] = $arr;                }            }        return $sort;    }    private function get_categoryBrandSort(){        $result = App::$db -> query("                                SELECT id, title                                FROM brands                                ");        if($result -> columnCount() != 0) {            $result -> setFetchMode(PDO::FETCH_ASSOC);            while ($arr = $result->fetch()) {                $brands[] = $arr;            }        }        return $brands;    }    public function get_status($status){        switch ($status){            case 'Есть в наличии':                $a = '<div class="product_status_4">' .$status. '</div>'; break;            case 'Нет в наличии':                $a = '<div class="product_status_3">' .$status. '</div>'; break;            case 'Наличие уточняйте':                $a = '<div class="product_status_1">' .$status. '</div>'; break;        }        return $a;    }    public function get_statusProduct($id){    }    private function go_SortPrice($min, $max){        $result = App::$db -> query("				                      SELECT *				                      FROM categories				                      WHERE title = '" .$this -> category. "'			                        ");        if($result -> columnCount() != 0) {            $result -> setFetchMode(PDO::FETCH_ASSOC);            while ($category = $result->fetch()) {                $arr[] = $category;            }            foreach ($arr AS $cat) {                if($cat['parent_id '] <= 3) {                    $result = App::$db->query("                                            SELECT product.*                                            FROM product                                            INNER JOIN categories                                            ON product.id_category = categories.id                                            WHERE categories.parent_id = '" . $cat['id'] . "'                                            and product.price_g < '" . $max . "'                                            and product.price_g > '" . $min . "'                                            ");                    if($result -> columnCount() != 0) {                        $result->setFetchMode(PDO::FETCH_ASSOC);                        while ($arr = $result->fetch()) {                            $sort[] = $arr;                        }                    }                    $this -> product = $sort;                }else{                    $result = App::$db->query("                                            SELECT product.*                                            FROM product                                            INNER JOIN categories                                            ON product.id_category = categories.id                                            WHERE categories.id = '" . $cat['id'] . "'                                            and product.price_g < '" . $max . "'                                            and product.price_g > '" . $min . "'                                            ");                    if($result -> columnCount() != 0) {                        $result->setFetchMode(PDO::FETCH_ASSOC);                        while ($arr = $result->fetch()) {                            $sort[] = $arr;                        }                    }                    $this -> product = $sort;                }            }        }    }    private function go_SortBrand($brand){    }    /**     * @param $id     */    private function go_toPay ($id){        parent::setCookie($id);    }}?>